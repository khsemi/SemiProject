--주의!! 테이블 삭제 및 생성은 제약조건으로 인해 순서 에 맞게 진행할것!!!--
--시퀀스 삭제( 초기화 작업 )

DROP SEQUENCE KH_CAL_SEQ;
DROP SEQUENCE KH_MAPS_SEQ;
DROP SEQUENCE KH_NOTE_SEQ;
DROP SEQUENCE KH_USER_SEQ;
DROP SEQUENCE KH_BOARD_SEQ;
DROP SEQUENCE KH_FOODTICKET_SEQ;
DROP SEQUENCE KH_POINT_SEQ;
DROP SEQUENCE KH_COMMENT_SEQ;
DROP SEQUENCE KH_FAVORITE_SEQ;

--시퀀스 삭제( 초기화 작업 - 각테이블 아이디값 생성 ) 
CREATE SEQUENCE KH_CAL_SEQ;
CREATE SEQUENCE KH_MAPS_SEQ;
CREATE SEQUENCE KH_NOTE_SEQ;
CREATE SEQUENCE KH_USER_SEQ;
CREATE SEQUENCE KH_BOARD_SEQ;
CREATE SEQUENCE KH_FOODTICKET_SEQ;
CREATE SEQUENCE KH_POINT_SEQ;
CREATE SEQUENCE KH_COMMENT_SEQ;
CREATE SEQUENCE KH_FAVORITE_SEQ;

--테이블 삭제( 초기화작업 )
DROP TABLE KH_FAVORITE;
DROP TABLE KH_POINT;
DROP TABLE KH_FOODTICKET;
DROP TABLE KH_NOTE;
DROP TABLE KH_CAL;
DROP TABLE KH_COMMENT;
DROP TABLE KH_BOARD;
DROP TABLE KH_MAPS;
DROP TABLE KH_USER;

-- 테이블 생성( 캘린더, 캘린더_클래스, 쪽지, 유저, 게시글, 식권, 포인트, 댓글, 추천&비추천 )
-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- KH_USER TABLE CREATE SQL
CREATE TABLE KH_USER
(
   USER_SEQ          NUMBER          PRIMARY KEY,
    USER_ID            VARCHAR2(4000)  UNIQUE   NOT NULL, 
    USER_PW            VARCHAR2(4000)  NOT NULL, 
    USER_NAME             VARCHAR2(4000)  NOT NULL, 
    USER_NICKNAME      VARCHAR2(4000)  UNIQUE   NOT NULL, 
    USER_ADDRESS       VARCHAR2(4000)  NOT NULL, 
    USER_EMAIL         VARCHAR2(4000)  UNIQUE   NOT NULL,
    USER_EMAILHASH      VARCHAR2(4000)    NOT NULL,
    USER_EMAILCHECKED   VARCHAR2(4000)  CHECK(USER_EMAILCHECKED IN('TRUE','FALSE')),
    USER_PHONE          VARCHAR2(4000)  UNIQUE   NOT NULL, 
    USER_STATE          VARCHAR2(10)    CHECK(USER_STATE IN('TRUE','FALSE')),
    USER_TYPE          VARCHAR2(10)    CHECK(USER_TYPE IN('USER' , 'ADMIN'))
);

-- MAPS TABLE CREATE SQL
CREATE TABLE KH_MAPS
(
    MAPS_SEQ_ID    NUMBER      NOT NULL, 
    MAPS_NAME      VARCHAR2(4000)    UNIQUE   NOT NULL, 
    MAPS_DETAIL    VARCHAR2(4000)    NOT NULL, 
    MAPS_X         VARCHAR2(4000)    NOT NULL, 
    MAPS_Y         VARCHAR2(4000)    NOT NULL, 
    CONSTRAINT KH_MAPS_PK PRIMARY KEY (MAPS_SEQ_ID)
);

-- KH_BOARD TABLE CREATE SQL
CREATE TABLE KH_BOARD
(
    BOARD_SEQ_ID      NUMBER      NOT NULL, 
    BOARD_TITLE       VARCHAR2(4000)    NOT NULL, 
    BOARD_CONTENT     CLOB        NOT NULL, 
    BOARD_REGDATE     DATE        NOT NULL, 
    VIEW_COUNT        NUMBER      NOT NULL, 
    USER_SEQ          NUMBER      NOT NULL, 
    BOARD_CATEGORY    VARCHAR2(4000)    NOT NULL, 
    MAPS_ID           NUMBER      NULL, 
    CONSTRAINT KH_BOARD_PK PRIMARY KEY (BOARD_SEQ_ID)
);                                                  

ALTER TABLE KH_BOARD
    ADD CONSTRAINT FK_KH_BOARD_USER_SEQ FOREIGN KEY (USER_SEQ)
        REFERENCES KH_USER (USER_SEQ);

ALTER TABLE KH_BOARD
    ADD CONSTRAINT FK_KH_BOARD_MAPS_ID FOREIGN KEY (MAPS_ID)
        REFERENCES KH_MAPS (MAPS_SEQ_ID);


-- KH_COMMENT TABLE CREATE SQL
CREATE TABLE KH_COMMENT
(
    COMMENT_SEQ_ID     NUMBER      NOT NULL, 
    BOARD_SEQ_ID       NUMBER      NOT NULL, 
    USER_SEQ           NUMBER      NOT NULL, 
    COMMENT_CONTENT    VARCHAR2(4000)    NOT NULL, 
    COMMENT_REGDATE    DATE        NOT NULL, 
    CONSTRAINT KH_COMMENT_PK PRIMARY KEY (COMMENT_SEQ_ID)
);

ALTER TABLE KH_COMMENT
    ADD CONSTRAINT FK_KH_COMMENT_USER_SEQ FOREIGN KEY (USER_SEQ)
        REFERENCES KH_USER (USER_SEQ);

ALTER TABLE KH_COMMENT
    ADD CONSTRAINT FK_KH_COMMENT_BOARD_SEQ_ID FOREIGN KEY (BOARD_SEQ_ID)
        REFERENCES KH_BOARD (BOARD_SEQ_ID);


-- KH_CAL TABLE CREATE SQL
CREATE TABLE KH_CAL
(
    CAL_SEQ_ID      NUMBER      NOT NULL, 
    USER_SEQ        NUMBER      NOT NULL, 
    CAL_TITLE       VARCHAR2(4000)    NOT NULL, 
    CAL_CONTENT     VARCHAR2(4000)    NOT NULL, 
    CAL_MDATE       VARCHAR2(4000)  NOT NULL,
    CAL_REGDATE     DATE        NOT NULL, 
    CAL_CATEGORY    VARCHAR2(4000)    NOT NULL, 
    CONSTRAINT KH_CAL_PK PRIMARY KEY (CAL_SEQ_ID)
);  

ALTER TABLE KH_CAL
    ADD CONSTRAINT FK_KH_CAL_USER_SEQ FOREIGN KEY (USER_SEQ)
        REFERENCES KH_USER (USER_SEQ);


-- KH_NOTE TABLE CREATE SQL
CREATE TABLE KH_NOTE
(
    NOTE_SEQ_ID       NUMBER      NOT NULL, 
    NOTE_REGDATE      DATE        NOT NULL, 
    NOTE_TITLE        VARCHAR2(4000)    NOT NULL, 
    NOTE_CONTENT      CLOB        NOT NULL, 
    SEND_USER_ID      VARCHAR2(4000)    NOT NULL, 
    RECIVE_USER_ID    VARCHAR2(4000)    NOT NULL, 
    CONSTRAINT KH_NOTE_PK PRIMARY KEY (NOTE_SEQ_ID)
);

--물리 ERD 설계과정에서 오류가 발생하기에 아래 제약조건은 무시한다.
--ALTER TABLE KH_NOTE
--    ADD CONSTRAINT FK_KH_NOTE_RECIVE_USER_ID FOREIGN KEY (RECIVE_USER_ID)
--        REFERENCES KH_USER (USER_ID);

--ALTER TABLE KH_NOTE
--    ADD CONSTRAINT FK_KH_NOTE_SEND_USER_ID FOREIGN KEY (SEND_USER_ID)
--        REFERENCES KH_USER (USER_ID);
-------------------------------------------------

-- KH_FOODTICKET TABLE CREATE SQL
CREATE TABLE KH_FOODTICKET
(
    FOODTICKET_SEQ_ID    NUMBER      NOT NULL, 
    USER_SEQ             NUMBER      NOT NULL, 
<<<<<<< HEAD
    FOODTICKET_QRCODE    VARCHAR2(4000)    UNIQUE  , 
=======
    FOODTICKET_QRCODE    VARCHAR2(4000)    UNIQUE, 
>>>>>>> refs/remotes/origin/master
    FOODTICKET_NAME      VARCHAR2(4000)    NOT NULL, 
    FOODTICKET_PAY       NUMBER      NOT NULL, 
    CONSTRAINT KH_FOODTICKET_PK PRIMARY KEY (FOODTICKET_SEQ_ID)
);

DROP TABLE KH_FOODTICKET;

ALTER TABLE KH_FOODTICKET
    ADD CONSTRAINT FK_KH_FOODTICKET_USER_SEQ FOREIGN KEY (USER_SEQ)
        REFERENCES KH_USER (USER_SEQ);


-- KH_POINT TABLE CREATE SQL
CREATE TABLE KH_POINT
(
    POINT_SEQ_ID     NUMBER   NOT NULL, 
    USER_SEQ         NUMBER   NOT NULL, 
    POINT_REGDATE    DATE     NOT NULL, 
    POINT_BALANCE    NUMBER   NOT NULL, 
    POINT_STATE      VARCHAR2(40)   NOT NULL,

    CONSTRAINT KH_POINT_PK PRIMARY KEY (POINT_SEQ_ID)
);

ALTER TABLE KH_POINT
    ADD CONSTRAINT FK_KH_POINT_USER_SEQ FOREIGN KEY (USER_SEQ)
        REFERENCES KH_USER (USER_SEQ);



-- KH_FAVORITE TABLE CREATE SQL
CREATE TABLE KH_FAVORITE
(
    FAVORITE_SEQ_ID    NUMBER      NOT NULL, 
    BOARD_SEQ_ID       NUMBER      NOT NULL, 
    USER_SEQ           NUMBER      NOT NULL, 
    FAVORITE_COUNT     VARCHAR2(4000)    NOT NULL, 
    CONSTRAINT KH_FAVORITE_PK PRIMARY KEY (FAVORITE_SEQ_ID)
);

ALTER TABLE KH_FAVORITE
    ADD CONSTRAINT FK_KH_FAVORITE_BOARD_SEQ_ID FOREIGN KEY (BOARD_SEQ_ID)
        REFERENCES KH_BOARD (BOARD_SEQ_ID);

ALTER TABLE KH_FAVORITE
    ADD CONSTRAINT FK_KH_FAVORITE_USER_SEQ FOREIGN KEY (USER_SEQ)
        REFERENCES KH_USER (USER_SEQ);




--테스트값 삽입(제약조건으로 인해 유저 테이블 데이터를 먼저 삽입 시켜줘야함)
INSERT INTO KH_POINT VALUES(KH_POINT_SEQ.NEXTVAL, 1, SYSDATE, 4000, '사용');
--유저
INSERT INTO KH_USER VALUES('a','a','a','a','a','a','a','TRUE',1,'a');
--게시글
BEGIN
    FOR i IN 1..100 LOOP
        INSERT INTO KH_BOARD(BOARD_SEQ_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_REGDATE, VIEW_COUNT, USER_SEQ, BOARD_CATEGORY, MAPS_ID) 
        VALUES(KH_BOARD_SEQ.NEXTVAL, '게시글 테스트','이것은 테스트 내용입니다. 모두 테스트 하세요.', SYSDATE, 0, 1, 'STUDY', NULL);
    END LOOP;
END;
--totalCount 구하기
SELECT count(*)
FROM KH_BOARD
WHERE BOARD_CATEGORY LIKE'%STUDY%';

--CATEGORY 검색 후 rownum처리(페이징)
SELECT B.BOARD_SEQ_ID, B.BOARD_CATEGORY, B.BOARD_TITLE, B.BOARD_CONTENT, B.USER_SEQ, B.BOARD_REGDATE
      FROM (SELECT rownum AS rn, A.BOARD_SEQ_ID, A.BOARD_CATEGORY, A.BOARD_TITLE, A.BOARD_CONTENT, A.USER_SEQ, A.BOARD_REGDATE
            FROM (SELECT BOARD_SEQ_ID, BOARD_CATEGORY, BOARD_TITLE, BOARD_CONTENT, USER_SEQ, BOARD_REGDATE
                  FROM KH_BOARD
                  WHERE BOARD_CATEGORY LIKE '%STUDY%'
                  ORDER BY BOARD_SEQ_ID DESC)A
      WHERE rownum <= 10)B
WHERE B.rn >= 0;
      
--CATEGORY 검색 후 조건 검색 결과 COUNT(totalCount 구하기)
SELECT COUNT(*)   
FROM (SELECT BOARD_NO, BOARD_CATEGORY, BOARD_TITLE, BOARD_CONTENT, BOARD_WRITER, BOARD_REGDATE
      FROM BOARD 
      WHERE BOARD_CATEGORY LIKE '%STUDY%')A
WHERE BOARD_TITLE LIKE '%test%'  OR BOARD_CONTENT LIKE '%test%' OR BOARD_WRITER LIKE '%test%';

--CATEGORY 검색 후 title,content, writer 검색 후 rownum 처리(페이징)
SELECT C.BOARD_NO, C.BOARD_CATEGORY, C.BOARD_TITLE, C.BOARD_CONTENT, C.BOARD_WRITER, C.BOARD_REGDATE
      FROM (SELECT rownum AS rn, B.BOARD_NO, B.BOARD_CATEGORY, B.BOARD_TITLE, B.BOARD_CONTENT, B.BOARD_WRITER, B.BOARD_REGDATE
         FROM (SELECT A.BOARD_NO, A.BOARD_CATEGORY, A.BOARD_TITLE, A.BOARD_CONTENT, A.BOARD_WRITER, A.BOARD_REGDATE
               FROM (SELECT BOARD_NO, BOARD_CATEGORY, BOARD_TITLE, BOARD_CONTENT, BOARD_WRITER, BOARD_REGDATE
                     FROM BOARD
                     WHERE BOARD_CATEGORY LIKE '%TIPS%')A
         WHERE BOARD_TITLE LIKE '%test%'  OR BOARD_CONTENT LIKE '%test%' OR BOARD_WRITER LIKE '%test%'
         ORDER BY BOARD_NO DESC)B
      WHERE rownum <= 10)C
WHERE C.rn >= 0;


BEGIN
    FOR i IN 1..100 LOOP
        INSERT INTO KH_BOARD(BOARD_SEQ_ID, BOARD_TITLE, BOARD_CONTENT, BOARD_REGDATE, VIEW_COUNT, USER_SEQ, BOARD_CATEGORY, MAPS_ID) 
        VALUES(KH_BOARD_SEQ.NEXTVAL, '게시글 테스트','이것은 테스트 내용입니다. 모두 테스트 하세요.', SYSDATE, 0, 1, 'STUDY', NULL);
    END LOOP;
END;